// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto.proto

package cryptogo

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CompressionAlgorithm int32

const (
	CompressionAlgorithm_UNKNOWN_COMPRESSION CompressionAlgorithm = 0
)

var CompressionAlgorithm_name = map[int32]string{
	0: "UNKNOWN_COMPRESSION",
}

var CompressionAlgorithm_value = map[string]int32{
	"UNKNOWN_COMPRESSION": 0,
}

func (x CompressionAlgorithm) String() string {
	return proto.EnumName(CompressionAlgorithm_name, int32(x))
}

func (CompressionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{0}
}

type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_UNKNOWN_ENCRYPTION  EncryptionAlgorithm = 0
	EncryptionAlgorithm_AES_GCM_NOPADDING   EncryptionAlgorithm = 1
	EncryptionAlgorithm_PBKDF2WITHHMACSHA1  EncryptionAlgorithm = 2
	EncryptionAlgorithm_RSA_ECB_OAEPPADDING EncryptionAlgorithm = 3
)

var EncryptionAlgorithm_name = map[int32]string{
	0: "UNKNOWN_ENCRYPTION",
	1: "AES_GCM_NOPADDING",
	2: "PBKDF2WITHHMACSHA1",
	3: "RSA_ECB_OAEPPADDING",
}

var EncryptionAlgorithm_value = map[string]int32{
	"UNKNOWN_ENCRYPTION":  0,
	"AES_GCM_NOPADDING":   1,
	"PBKDF2WITHHMACSHA1":  2,
	"RSA_ECB_OAEPPADDING": 3,
}

func (x EncryptionAlgorithm) String() string {
	return proto.EnumName(EncryptionAlgorithm_name, int32(x))
}

func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{1}
}

type SignatureAlgorithm int32

const (
	SignatureAlgorithm_UNKNOWN_SIGNATURE SignatureAlgorithm = 0
	SignatureAlgorithm_SHA512WITHRSA     SignatureAlgorithm = 1
	SignatureAlgorithm_SHA512WITHRSA_PSS SignatureAlgorithm = 2
)

var SignatureAlgorithm_name = map[int32]string{
	0: "UNKNOWN_SIGNATURE",
	1: "SHA512WITHRSA",
	2: "SHA512WITHRSA_PSS",
}

var SignatureAlgorithm_value = map[string]int32{
	"UNKNOWN_SIGNATURE": 0,
	"SHA512WITHRSA":     1,
	"SHA512WITHRSA_PSS": 2,
}

func (x SignatureAlgorithm) String() string {
	return proto.EnumName(SignatureAlgorithm_name, int32(x))
}

func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{2}
}

type PublicKeyFormat int32

const (
	PublicKeyFormat_UNKNOWN_PUBLIC_KEY_FORMAT PublicKeyFormat = 0
	PublicKeyFormat_PKCS1_PUBLIC              PublicKeyFormat = 1
	PublicKeyFormat_PKIX                      PublicKeyFormat = 2
	PublicKeyFormat_X509                      PublicKeyFormat = 3
)

var PublicKeyFormat_name = map[int32]string{
	0: "UNKNOWN_PUBLIC_KEY_FORMAT",
	1: "PKCS1_PUBLIC",
	2: "PKIX",
	3: "X509",
}

var PublicKeyFormat_value = map[string]int32{
	"UNKNOWN_PUBLIC_KEY_FORMAT": 0,
	"PKCS1_PUBLIC":              1,
	"PKIX":                      2,
	"X509":                      3,
}

func (x PublicKeyFormat) String() string {
	return proto.EnumName(PublicKeyFormat_name, int32(x))
}

func (PublicKeyFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{3}
}

type PrivateKeyFormat int32

const (
	PrivateKeyFormat_UNKNOWN_PRIVATE_KEY_FORMAT PrivateKeyFormat = 0
	PrivateKeyFormat_PKCS1_PRIVATE              PrivateKeyFormat = 1
	PrivateKeyFormat_PKCS8                      PrivateKeyFormat = 2
)

var PrivateKeyFormat_name = map[int32]string{
	0: "UNKNOWN_PRIVATE_KEY_FORMAT",
	1: "PKCS1_PRIVATE",
	2: "PKCS8",
}

var PrivateKeyFormat_value = map[string]int32{
	"UNKNOWN_PRIVATE_KEY_FORMAT": 0,
	"PKCS1_PRIVATE":              1,
	"PKCS8":                      2,
}

func (x PrivateKeyFormat) String() string {
	return proto.EnumName(PrivateKeyFormat_name, int32(x))
}

func (PrivateKeyFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{4}
}

type KeyShare struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublicKey            []byte           `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PublicFormat         PublicKeyFormat  `protobuf:"varint,3,opt,name=public_format,json=publicFormat,proto3,enum=crypto.PublicKeyFormat" json:"public_format,omitempty"`
	PrivateKey           []byte           `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PrivateFormat        PrivateKeyFormat `protobuf:"varint,5,opt,name=private_format,json=privateFormat,proto3,enum=crypto.PrivateKeyFormat" json:"private_format,omitempty"`
	Password             []byte           `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *KeyShare) Reset()         { *m = KeyShare{} }
func (m *KeyShare) String() string { return proto.CompactTextString(m) }
func (*KeyShare) ProtoMessage()    {}
func (*KeyShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{0}
}

func (m *KeyShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyShare.Unmarshal(m, b)
}
func (m *KeyShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyShare.Marshal(b, m, deterministic)
}
func (m *KeyShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyShare.Merge(m, src)
}
func (m *KeyShare) XXX_Size() int {
	return xxx_messageInfo_KeyShare.Size(m)
}
func (m *KeyShare) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyShare.DiscardUnknown(m)
}

var xxx_messageInfo_KeyShare proto.InternalMessageInfo

func (m *KeyShare) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyShare) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *KeyShare) GetPublicFormat() PublicKeyFormat {
	if m != nil {
		return m.PublicFormat
	}
	return PublicKeyFormat_UNKNOWN_PUBLIC_KEY_FORMAT
}

func (m *KeyShare) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *KeyShare) GetPrivateFormat() PrivateKeyFormat {
	if m != nil {
		return m.PrivateFormat
	}
	return PrivateKeyFormat_UNKNOWN_PRIVATE_KEY_FORMAT
}

func (m *KeyShare) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func init() {
	proto.RegisterEnum("crypto.CompressionAlgorithm", CompressionAlgorithm_name, CompressionAlgorithm_value)
	proto.RegisterEnum("crypto.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("crypto.SignatureAlgorithm", SignatureAlgorithm_name, SignatureAlgorithm_value)
	proto.RegisterEnum("crypto.PublicKeyFormat", PublicKeyFormat_name, PublicKeyFormat_value)
	proto.RegisterEnum("crypto.PrivateKeyFormat", PrivateKeyFormat_name, PrivateKeyFormat_value)
	proto.RegisterType((*KeyShare)(nil), "crypto.KeyShare")
}

func init() { proto.RegisterFile("crypto.proto", fileDescriptor_527278fb02d03321) }

var fileDescriptor_527278fb02d03321 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xdf, 0x6f, 0x9a, 0x50,
	0x14, 0xc7, 0x8b, 0x6d, 0x8d, 0x9e, 0x6a, 0x77, 0xbd, 0x5d, 0xa7, 0x6b, 0xd2, 0xcd, 0x6c, 0x2f,
	0xc6, 0x07, 0x9d, 0x5d, 0x9a, 0x6c, 0xc9, 0x92, 0xe5, 0x8a, 0xa8, 0x04, 0x85, 0x1b, 0xae, 0xd6,
	0x76, 0x2f, 0x04, 0xdd, 0x9d, 0x92, 0x89, 0x10, 0xc4, 0x35, 0xfe, 0xe9, 0x7b, 0x5b, 0xb8, 0x5c,
	0x5c, 0xec, 0x13, 0xe7, 0xc7, 0x87, 0xcf, 0xf7, 0xe1, 0x00, 0x94, 0x16, 0xd1, 0x3e, 0x8c, 0x83,
	0x56, 0x18, 0x05, 0x71, 0x80, 0xf3, 0x69, 0xf7, 0xe1, 0xaf, 0x02, 0x05, 0x83, 0xef, 0xd9, 0xca,
	0x8d, 0x38, 0xc6, 0x70, 0xb6, 0x71, 0x7d, 0x5e, 0x53, 0xea, 0x4a, 0xa3, 0x68, 0x8b, 0x1a, 0xdf,
	0x02, 0x84, 0xbb, 0xf9, 0xda, 0x5b, 0x38, 0xbf, 0xf9, 0xbe, 0x96, 0xab, 0x2b, 0x8d, 0x92, 0x5d,
	0x4c, 0x27, 0x06, 0xdf, 0xe3, 0x6f, 0x50, 0x96, 0xeb, 0x5f, 0x41, 0xe4, 0xbb, 0x71, 0xed, 0xb4,
	0xae, 0x34, 0x2e, 0xef, 0xaa, 0x2d, 0x99, 0x46, 0x33, 0xb2, 0x2f, 0xd6, 0x76, 0x29, 0xa5, 0xd3,
	0x0e, 0xbf, 0x87, 0x8b, 0x30, 0xf2, 0xfe, 0xb8, 0x31, 0x17, 0xf6, 0x33, 0x61, 0x07, 0x39, 0x4a,
	0xf4, 0xdf, 0xe1, 0x32, 0x03, 0xa4, 0xff, 0x5c, 0xf8, 0x6b, 0x07, 0xff, 0x81, 0x95, 0x01, 0x65,
	0xc9, 0xcb, 0x84, 0x1b, 0x28, 0x84, 0xee, 0x76, 0xfb, 0x1c, 0x44, 0x3f, 0x6b, 0x79, 0xa1, 0x3f,
	0xf4, 0xcd, 0x36, 0xbc, 0x56, 0x03, 0x3f, 0x8c, 0xf8, 0x76, 0xeb, 0x05, 0x1b, 0xb2, 0x5e, 0x06,
	0x91, 0x17, 0xaf, 0x7c, 0x5c, 0x85, 0xab, 0xa9, 0x69, 0x98, 0xd6, 0xcc, 0x74, 0x54, 0x6b, 0x4c,
	0x6d, 0x8d, 0x31, 0xdd, 0x32, 0xd1, 0x49, 0x73, 0x07, 0x57, 0xda, 0x46, 0x04, 0x1f, 0xf1, 0x6f,
	0x00, 0x67, 0xbc, 0x66, 0xaa, 0xf6, 0x13, 0x9d, 0x08, 0x1c, 0x5f, 0x43, 0x85, 0x68, 0xcc, 0x19,
	0xa8, 0x63, 0xc7, 0xb4, 0x28, 0xe9, 0xf5, 0x74, 0x73, 0x80, 0x94, 0x04, 0xa7, 0x5d, 0xa3, 0xd7,
	0xbf, 0x9b, 0xe9, 0x93, 0xe1, 0x70, 0x4c, 0x54, 0x36, 0x24, 0x1d, 0x94, 0x4b, 0x62, 0x6d, 0x46,
	0x1c, 0x4d, 0xed, 0x3a, 0x16, 0xd1, 0x68, 0xf6, 0xc2, 0x69, 0x73, 0x0a, 0x98, 0x79, 0xcb, 0x8d,
	0x1b, 0xef, 0x22, 0xfe, 0x3f, 0xf5, 0x1a, 0x2a, 0x59, 0x2a, 0xd3, 0x07, 0x26, 0x99, 0x4c, 0x6d,
	0x0d, 0x9d, 0xe0, 0x0a, 0x94, 0xd9, 0x90, 0xdc, 0x77, 0x84, 0xdd, 0x66, 0x04, 0x29, 0x09, 0x79,
	0x34, 0x72, 0x28, 0x63, 0x28, 0xd7, 0x7c, 0x80, 0x57, 0x2f, 0xae, 0x83, 0x6f, 0xe1, 0x6d, 0xe6,
	0xa4, 0xd3, 0xee, 0x48, 0x57, 0x1d, 0x43, 0x7b, 0x72, 0xfa, 0x96, 0x3d, 0x26, 0x13, 0x74, 0x82,
	0x11, 0x94, 0xa8, 0xa1, 0xb2, 0x8e, 0x5c, 0x22, 0x05, 0x17, 0xe0, 0x8c, 0x1a, 0xfa, 0x23, 0xca,
	0x25, 0xd5, 0xe3, 0xfd, 0xa7, 0xaf, 0xe8, 0xb4, 0x49, 0x01, 0xbd, 0xbc, 0x0a, 0x7e, 0x07, 0x37,
	0x07, 0xb1, 0xad, 0x3f, 0x90, 0x89, 0x76, 0x6c, 0xae, 0x40, 0x59, 0x9a, 0xd3, 0x2d, 0x52, 0x70,
	0x11, 0xce, 0x93, 0xd1, 0x17, 0x94, 0xeb, 0x1a, 0x50, 0x5d, 0x04, 0x7e, 0xcb, 0x5d, 0xf3, 0x78,
	0xc5, 0x3d, 0xf7, 0xd9, 0x8d, 0xb8, 0xbc, 0x7f, 0xf7, 0x42, 0x15, 0x4f, 0x9a, 0x7c, 0xd4, 0x3f,
	0x3e, 0x2e, 0xbd, 0x78, 0xb5, 0x9b, 0xb7, 0x16, 0x81, 0xdf, 0x26, 0x12, 0x9e, 0xb9, 0x11, 0x1f,
	0x8d, 0xd4, 0x76, 0xca, 0x2f, 0x83, 0x79, 0x5e, 0xfc, 0x00, 0x9f, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x73, 0x19, 0x4a, 0x54, 0x10, 0x03, 0x00, 0x00,
}
